extends layout
include layout

block content
    .w3-container.w3-padding-16
        .w3-row
            input.w3-input(type='text', placeholder='Search', id='searchString', name='searchString')
            form#checkboxForm
                .w3-padding-small
                    .w3-col.s2.w3-padding-small
                        input(type='submit', name='tierButton', value='TIER 1', class='w3-button w3-round w3-green w3-block')
                    .w3-col.s2.w3-padding-small
                        input(type='submit', name='tierButton', value='TIER 2', class='w3-button w3-round w3-green w3-block')
                    .w3-col.s2.w3-padding-small
                        input(type='submit', name='tierButton', value='TIER 3', class='w3-button w3-round w3-green w3-block')
                .w3-padding-16
                .w3-padding-16
                    table.w3-table.w3-card(id="resorts-table")
                        thead
                            tr
                                th Resort ID
                                th Resort Name
                                th Guesty Listing Name
                                th Unit Type
                                th Tier Type
                        tbody(id="table-body")
        
        div.w3-center
            div.w3-bar(id="pagination")


            script(src='/javascripts/showRecords.js')
            script(src='/javascripts/environment.js')
            script.
                let limit = 10, offset = 0, search = '';
                let records = !{JSON.stringify(records)};
                let endpoint = `resorts`;

                let tabID = generateUniqueString();

                document.addEventListener('DOMContentLoaded', async function() {
                    const ws = await connectToServer(window.env, 'resorts');
                    updatePagination(limit, offset, "resorts", 1, records, endpoint, search, ws, tabID);
                });


                const form = document.getElementById('checkboxForm');
                form.addEventListener('submit', function (e) {
                    e.preventDefault(); 
    
                    const tierButton = form.querySelector('input[name="tierButton"]:focus');
                    const tierButtonValue = tierButton.value;

                    // Get the selected checkboxes
                    const checkboxes = form.querySelectorAll('input[type="checkbox"]:checked');
                    const selectedValues = Array.from(checkboxes).map(checkbox => checkbox.value);

                    // Send the selected checkbox values to your server endpoint using AJAX
                    fetch(`/tier/update?tier=${tierButtonValue}`, {
                        method: 'POST',
                        body: JSON.stringify({ checkboxes: selectedValues }),
                        headers: {
                        'Content-Type': 'application/json'
                        }
                    })
                    .then(response => {
                        if (response.ok) {
                        // Handle a successful response from the server
                        console.log('Form submitted successfully');
                        } else {
                        // Handle errors, if any
                        console.error('Form submission failed');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                    });
                });

